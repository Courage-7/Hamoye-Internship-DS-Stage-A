# -*- coding: utf-8 -*-
"""Stage B quiz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GScgszGXdgRRROcnDV1gnb_F7ju-dqYw
"""



"""## Data Science Track - Stage B.

Name: Courage Siameh

ID: 186c55fbefc1f000

## Machine Learning: Regression - Predicting Energy Efficiency Of Buildings
### Quiz Questions 17 - 25
"""

#importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#importing data from pc to colab
from google.colab import files
uploaded = files.upload()

# Reading and displaying our dataset
energy_data = pd.read_csv("energydata_complete.csv")
energy_data.head()

# gettinng info on the dataset
energy_data.info()

# displaying 20 random observations from out dataset
energy_data.sample(20)

# displaying column names of the dataset, it appears they are vaguely labelled or defined.
# Renaming columns will prove effective in further understanding each column in this analysis
energy_data.columns

energy_data.shape

energy_data.describe()

# value counts of dtypes
energy_data.dtypes.value_counts()

# checking mean of nuull values
energy_data.isnull().mean()

"""Question 17"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Splitting the data into features (X) and target variable (y)
X = energy_data[['T2']]
y = energy_data['T6']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Calculating Root Mean Squared Error (RMSE)
rmse = mean_squared_error(y_test, y_pred, squared=False)

print("Root Mean Squared Error: {:.3f}".format(rmse))

"""Question 18."""

from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import MinMaxScaler

# dropping the specified columns
energy_data.drop(columns=['date', 'lights'], inplace=True)

# Define features (X) and target variable (y)
X = energy_data.drop(columns=['Appliances'])
y = energy_data['Appliances']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Normalize the dataset using MinMaxScaler
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create a linear regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train_scaled, y_train)

# Make predictions on the training data
y_train_pred = model.predict(X_train_scaled)

# Calculate the Mean Absolute Error (MAE) for the training set
mae_train = mean_absolute_error(y_train, y_train_pred)

print("Mean Absolute Error (Training Set): {:.3f}".format(mae_train))

"""Question 19

"""

# Calculate the Root Mean Squared Error (RMSE) for the training set
mse_train = mean_squared_error(y_train, y_train_pred)
rmse_train = np.sqrt(mse_train)
print("Root Mean Squared Error (Training Set): {:.3f}".format(rmse_train))

"""Question 20"""

# Calculate the Mean Absolute Error (MAE) for the test set

# Make predictions on the test data
y_test_pred = model.predict(X_test_scaled)
mae_test = mean_absolute_error(y_test, y_test_pred)
print("Mean Absolute Error (Test Set): {:.3f}".format(mae_test))

"""Question 21"""

# Calculate the Root Mean Squared Error (RMSE) for the test set
mse_test = mean_squared_error(y_test, y_test_pred)
rmse_test = np.sqrt(mse_test)
print("Root Mean Squared Error (Test Set): {:.3f}".format(rmse_test))

"""Question 23"""

from sklearn.linear_model import Ridge

# Create a Ridge regression model
ridge_model = Ridge()

# Train the model on the training data
ridge_model.fit(X_train_scaled, y_train)

# Make predictions on the test data
y_test_pred = ridge_model.predict(X_test_scaled)

# Calculate the mean squared error (MSE) for the test set
mse_test = mean_squared_error(y_test, y_test_pred)

# Calculate the Root Mean Squared Error (RMSE) for the test set
rmse_test = np.sqrt(mse_test)

print("Root Mean Squared Error (Test Set) - Ridge Regression: {:.3f}".format(rmse_test))

"""Question 24."""

from sklearn.linear_model import Lasso
# Create a Lasso regression model with default parameters
lasso_model = Lasso()

# Train the model on the training data
lasso_model.fit(X_train, y_train)

# Obtain the feature weights
feature_weights = lasso_model.coef_

# Count the number of features with non-zero feature weights
non_zero_features = sum(feature_weights != 0)

print("Number of features with non-zero feature weights: ", non_zero_features)

"""Question 25"""

# Calculate the mean squared error (MSE) for the test set
mse_test = mean_squared_error(y_test, y_test_pred)

# Calculate the Root Mean Squared Error (RMSE) for the test set
rmse_test = np.sqrt(mse_test)

print("Root Mean Squared Error (Test Set) - Lasso Regression: {:.3f}".format(rmse_test))